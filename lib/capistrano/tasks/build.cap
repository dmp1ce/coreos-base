#-*- mode: ruby -*-
# vi:set ft=ruby :

# Relative path to the projects directory
def projects_path
  return "projects"
end

# Function to determine the current project name.
def project_name(file_path)
  project = File.dirname(file_path).match(/.*projects\/(.*)\/lib\/capistrano\/tasks.*/).captures.join()
end

# Funtion to return the complete path to the current project. Requires the file location to be passed as a perameter.
def current_project_path(current_path, file_path)
  return "#{current_path}/#{projects_path}/#{project_name(file_path)}"
end

# Create new flow for CoreOS deployment 
desc "Establish CoreOS deploy flow"
after "deploy:published", "deploy:coreos_deploy" do
  Rake::Task["deploy:build_docker_images"].invoke
  Rake::Task["deploy:copy_systemd_units"].invoke
  Rake::Task["reload_systemd"].invoke
  Rake::Task["restart_local_enable_service"].invoke
  Rake::Task["deploy:restart_units"].invoke
end

task "deploy:build_docker_images"
task "deploy:copy_systemd_units"
task "deploy:restart_units"

# Systemd and docker related tasks
desc "Restart local systemd services"
task :restart_local_enable_service do
  on roles(:all) do
    execute "sudo systemctl restart local-enable.service"
  end
end

desc "Reload Systemd. Useful update systemd with added or removed units."
task :reload_systemd do
  on roles(:all) do
    execute "sudo systemctl daemon-reload"
  end
end

# Clean
desc "Remove old containers and images"
task :remove_old do
  on roles(:all) do
    execute "docker ps -a | grep Exit | awk '{print $1}' | xargs --no-run-if-empty docker rm"
    execute "docker images | tail -n +2 | grep '^<none>' | awk '{print $3}' | xargs --no-run-if-empty docker rmi"
  end
end
